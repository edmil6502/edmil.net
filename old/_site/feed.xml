<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-09T01:12:21+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">edmil.net</title><subtitle>Personal website for Eddie Millichip, Computer Science undergraduate student at Aberystwyth University. </subtitle><entry><title type="html">macOS ‘System Data’ Cleanup</title><link href="http://localhost:4000/2025/04/09/macos-cleanup.html" rel="alternate" type="text/html" title="macOS ‘System Data’ Cleanup" /><published>2025-04-09T00:00:00+01:00</published><updated>2025-04-09T00:00:00+01:00</updated><id>http://localhost:4000/2025/04/09/macos-cleanup</id><content type="html" xml:base="http://localhost:4000/2025/04/09/macos-cleanup.html"><![CDATA[<p>I’ve got a base model M1 Macbook Air - 8GB RAM, 256GB of storage. While that’s nothing to shout about, most of my work is just in plaintext files (notes, code, etc.), which take up very little space, so that amount of storage SHOULD be plenty. Unfortunately, I’ve had storage issues for months, leading to sync issues, having to move files to external storage, and all sorts of faffing about I could really do without!</p>

<p>When I’d go into System Preferences and check out the “Storage” section, it would report 120GB being used by “System Data”, and wouldn’t elaborate any further as to what that actually was - not very useful. I’d need a better way of finding out where the bloat was!</p>

<h1 id="locating-the-offending-files">Locating the Offending Files</h1>
<p>The most useful command in this process was <code class="language-plaintext highlighter-rouge">du</code>. <code class="language-plaintext highlighter-rouge">du</code> (short for ‘Disk Usage’) is a standard UNIX tool that tells you how much storage a given directory is using up. The <code class="language-plaintext highlighter-rouge">-s</code> option ensures the command only prints an output for the files you specify, and the <code class="language-plaintext highlighter-rouge">-h</code> option outputs the size in human-readable units (i.e. 1GB instead of 1000000000). The <code class="language-plaintext highlighter-rouge">-t</code> option allows you to specify a threshold, so <code class="language-plaintext highlighter-rouge">-t 1000</code> won’t show anything under one kilobyte in size - handy when you’re looking for just the big files.</p>

<p>Most commonly, I was running <code class="language-plaintext highlighter-rouge">du -sh *</code>, which shows me how much disk space every file or subdirectory in my current working directory takes up. Starting from the root of the filesystem, I’d find where the biggest files/directories were, and keep going until I’d found something that was a) big, and b) unimportant. If there were lots of files, the <code class="language-plaintext highlighter-rouge">-t</code> option came in handy, and I’d use that to filter out the smaller files, leaving only the big ones.</p>

<h1 id="the-ios-simulator-files">The iOS Simulator Files</h1>
<p>Most of my storage issues started after I began playing around with iOS development. This required the installation of Xcode, as well as the appropriate iPhone simulators, and of course copies of the current iOS versions (18.1 and 18.2 at the time). When I eventually deleted Xcode, I thought that would be the end of my woes, but unfortunately not. Xcode had left remnants of the iOS simulators (I believe in /Library/), and I couldn’t remove them, not even with <code class="language-plaintext highlighter-rouge">sudo rm -rf</code>!</p>

<p>Eventually, I came across a possible solution online - disabling “System Integrity Protection”, which sounds like a terrible idea. I believe macOS had mistakenly rendered these iOS simulator files completely untouchable, even to someone logged in as root, and was protecting them from removal. Disabling System Integrity Protection is done by booting into Recovery Mode (done on my machine by holding down the power button to view boot options, then going into “Settings”), opening up a terminal (done from the menu bar), typing in <code class="language-plaintext highlighter-rouge">csrutil disable</code>, and once that’s all done, rebooting.</p>

<p>Once that was done, I was able to remove the offending folders with <code class="language-plaintext highlighter-rouge">sudo rm -rf</code> - finally!</p>

<p>Needless to say, System Integrity Protection is something that probably ought not to be messsed with. I’ve since turned it back on, before I accidentally nuke something important! While it is annoying that it gets in the way of deleting certain frivolous things like the iOS simulators, it’s reasurring to know that macOS won’t let me do too much damage to it!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve got a base model M1 Macbook Air - 8GB RAM, 256GB of storage. While that’s nothing to shout about, most of my work is just in plaintext files (notes, code, etc.), which take up very little space, so that amount of storage SHOULD be plenty. Unfortunately, I’ve had storage issues for months, leading to sync issues, having to move files to external storage, and all sorts of faffing about I could really do without!]]></summary></entry><entry><title type="html">Installing OpenBSD on an iMac G5</title><link href="http://localhost:4000/2025/04/08/openBSD-on-imac-g5.html" rel="alternate" type="text/html" title="Installing OpenBSD on an iMac G5" /><published>2025-04-08T00:00:00+01:00</published><updated>2025-04-08T00:00:00+01:00</updated><id>http://localhost:4000/2025/04/08/openBSD-on-imac-g5</id><content type="html" xml:base="http://localhost:4000/2025/04/08/openBSD-on-imac-g5.html"><![CDATA[<p>Now that I’m home for the Easter break, I’ve decided I’ll revamp my home server setup. Out with the Optiplex, and in with the iMac! I’d always wanted to self-host using some more interesting hardware, the Optiplex was only ever a temporary solution. I’d say my iMac G5 qualifies as pretty interesting hardware (PowerPC - exotic!), and given that it’s just sat around collecting dust, I think it’s about time I put it to good use!</p>

<h1 id="how-i-did-it">How I did it</h1>
<p>The first step is to create a disk that my iMac can boot into. The instructions for the installation procedure can be found <a href="https://www.openbsd.org/faq/faq4.html#bsd.rd">here</a>. I burnt the latest image for ‘macppc’ onto a DVD (right-click on the .iso file in Finder, and click “Burn to Disk”). From there, it’s the standard procedure for booting from an optical disk on Mac - hold ‘C’ on startup (C for CD). Alternatively, you could use the boot picker by holding ‘option’ on startup.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Now that I’m home for the Easter break, I’ve decided I’ll revamp my home server setup. Out with the Optiplex, and in with the iMac! I’d always wanted to self-host using some more interesting hardware, the Optiplex was only ever a temporary solution. I’d say my iMac G5 qualifies as pretty interesting hardware (PowerPC - exotic!), and given that it’s just sat around collecting dust, I think it’s about time I put it to good use!]]></summary></entry><entry><title type="html">edmil.net: More newer! Even improvier!</title><link href="http://localhost:4000/2025/04/04/setting-up-site.html" rel="alternate" type="text/html" title="edmil.net: More newer! Even improvier!" /><published>2025-04-04T00:00:00+01:00</published><updated>2025-04-04T00:00:00+01:00</updated><id>http://localhost:4000/2025/04/04/setting-up-site</id><content type="html" xml:base="http://localhost:4000/2025/04/04/setting-up-site.html"><![CDATA[<h1 id="the-old-site">The Old Site</h1>
<p>I bought this domain nearly a year ago - 14th of April 2024 - and it took quite a long time for me to actually get around to doing anything with it! I set up a machine at home to act as a web server over the Christmas / New Years break for 2024/25, making a simple HTML-only website. It wasn’t pretty, but it was my very own little corner of the web, and it was entirely self-hosted, which was very important to me!</p>

<p>The machine I used to host it was an old Dell Optiplex I had lying around, which conveniently had Ubuntu 20.04 installed on it already, from when it used to be my main machine. Setting up Apache wasn’t too much faff (I’d been through it before already at uni for System Administration). I set up SSH too, so I could remotely administer the machine, as well as a Dynamic DNS (DDNS) client for self-hosting without a static IP. That was a little confusing to set up, but I got it working in the end!</p>

<p>The site itself was very basic, with a brief description of who I am, what I’m interested in, and a picture of some very tasty ribs my friend Lewis got me while we were in Brussels (they’re from a place called Amadeus by the way - 28 Euro for Unlimited Ribs, what a barg!). Below is a picture of the old site in Safari 4.0, on my Power Macintosh G4. Obviously it works fine, because there’s barely anything to go wrong with it!</p>

<p><img src="/assets/edmil.net_powermac.jpg" alt="edmil.net on my PowerMac G4" /></p>

<h1 id="the-new-site-yes-this-one">The New Site (yes, this one!)</h1>
<p>Needless to say, the old site was a bit lacking, and it wouldn’t really do! Besides, it was raw HTML, so managing multiple pages and giving them a uniform look and structure was going to be a bit awkward. I needed some kind of framework to manage my site, and get it looking presentable. I’ve decided on Jekyll, as I have a little bit of experience with it. The <a href="https://abercompsoc.github.io">aberCompSoc website</a> uses Jekyll, and I’d been tinkering with that in an attempt to set up a ‘Directory’ page, listing all of the active members of CompSoc (or at least, the ones that don’t mind being bothered!).</p>

<p>One of the key things I’d like my website to be is accessible on older devices. Being a Static Site Generator (SSG - a program which generates HTML web pages from easy-to-write markup languages like Markdown), there’s not much in the way of fancy JavaScript, which is one of the biggest reasons modern sites are so slow on older or less powerful hardware. 
Ideally, I’d like my site to be accessible on my old Macintosh SE. For context, that’s got an 8MHz Motorola 68000, and 2.5 megabytes of memory, so absolute bare-bones, old-fashioned HTML will be necessary, no style or flair! In order to enable access on such underpowered hardware, I might create a ‘lite’ version of my site (e.g. ‘lite.edmil.net’). I’d still like all the same content to be accessible, so I’d need to either use an existing, super simple SSG, or create my own! One of the options I’ve found which looks promising is <a href="https://github.com/nuex/zodiac">Zodiac</a>, written in <em>sh</em> and <em>awk</em>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[The Old Site I bought this domain nearly a year ago - 14th of April 2024 - and it took quite a long time for me to actually get around to doing anything with it! I set up a machine at home to act as a web server over the Christmas / New Years break for 2024/25, making a simple HTML-only website. It wasn’t pretty, but it was my very own little corner of the web, and it was entirely self-hosted, which was very important to me!]]></summary></entry></feed>